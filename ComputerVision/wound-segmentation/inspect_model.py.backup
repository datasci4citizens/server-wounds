import h5py
import json
from keras.models import load_model
from keras.utils.generic_utils import CustomObjectScope
from tensorflow.keras.losses import binary_crossentropy
import keras.backend as K

def inspect_hdf5_model(model_path):
    """
    Inspeciona o conte√∫do de um arquivo .hdf5 para ver o que est√° salvo
    """
    print("="*60)
    print(f"üîç INSPECIONANDO MODELO: {model_path}")
    print("="*60)
    
    try:
        # Abrir arquivo HDF5 diretamente
        with h5py.File(model_path, 'r') as f:
            print("üìÅ ESTRUTURA DO ARQUIVO HDF5:")
            
            def print_structure(name, obj):
                print(f"  {name}")
            
            f.visititems(print_structure)
            
            # Verificar se tem configura√ß√£o do modelo
            if 'model_config' in f.attrs:
                print("\nüìê CONFIGURA√á√ÉO DO MODELO:")
                config = json.loads(f.attrs['model_config'].decode('utf-8'))
                print(f"  Classe: {config.get('class_name', 'N/A')}")
                print(f"  Backend: {config.get('config', {}).get('name', 'N/A')}")
            
            # Verificar otimizador
            if 'optimizer_weights' in f:
                print("\nüîß OTIMIZADOR: Presente")
            else:
                print("\nüîß OTIMIZADOR: Ausente")
                
            # Verificar training config
            if 'training_config' in f.attrs:
                print("\n‚öôÔ∏è CONFIGURA√á√ÉO DE TREINO:")
                training_config = json.loads(f.attrs['training_config'].decode('utf-8'))
                print(f"  Loss: {training_config.get('loss', 'N/A')}")
                print(f"  M√©tricas: {training_config.get('metrics', 'N/A')}")
                print(f"  Otimizador: {training_config.get('optimizer_config', {}).get('class_name', 'N/A')}")
    
    except Exception as e:
        print(f"‚ùå Erro lendo HDF5: {e}")
    
    print("\n" + "="*60)
    print("üß™ TESTANDO CARREGAMENTO DO MODELO")
    print("="*60)
    
    # Teste 1: Carregar sem custom_objects
    print("1Ô∏è‚É£ Tentando carregar SEM custom_objects...")
    try:
        model_simple = load_model(model_path, compile=False)
        print("‚úÖ SUCESSO! Modelo carregado sem depend√™ncias customizadas")
        print(f"   Input shape: {model_simple.input_shape}")
        print(f"   Output shape: {model_simple.output_shape}")
        print(f"   Par√¢metros: {model_simple.count_params():,}")
        simple_works = True
    except Exception as e:
        print(f"‚ùå FALHOU: {e}")
        simple_works = False
    
    # Teste 2: Carregar com custom_objects
    print("\n2Ô∏è‚É£ Tentando carregar COM custom_objects...")
    try:
        # Importar as fun√ß√µes necess√°rias
        from utils.learning.metrics import dice_coef, precision, recall
        from utils.learning.losses import dice_coef_loss
        
        def combined_loss(y_true, y_pred):
            bce = binary_crossentropy(y_true, y_pred)
            dice = dice_coef_loss(y_true, y_pred)
            return 0.5 * bce + 0.5 * dice
        
        model_custom = load_model(model_path, custom_objects={
            'recall': recall,
            'precision': precision,
            'dice_coef': dice_coef,
            'dice_coef_loss': dice_coef_loss,
            'combined_loss': combined_loss
        })
        print("‚úÖ SUCESSO! Modelo carregado com custom_objects")
        custom_works = True
    except Exception as e:
        print(f"‚ùå FALHOU: {e}")
        custom_works = False
    
    # Recomenda√ß√µes
    print("\n" + "="*60)
    print("üí° RECOMENDA√á√ïES")
    print("="*60)
    
    if simple_works:
        print("üéâ SEU MODELO √â INDEPENDENTE!")
        print("   ‚úÖ Voc√™ pode usar apenas:")
        print("     model = load_model('modelo.hdf5', compile=False)")
        print("   ‚úÖ N√£o precisa das bibliotecas customizadas para PREDI√á√ÉO")
        print("   ‚ö†Ô∏è  S√≥ precisa das custom_objects se quiser TREINAR mais")
    elif custom_works:
        print("üîß SEU MODELO PRECISA DAS FUN√á√ïES CUSTOMIZADAS")
        print("   ‚ùå Deve usar custom_objects para carregar")
        print("   üí° Alternativa: Salvar modelo independente")
    else:
        print("‚ùå PROBLEMA NO MODELO")
        print("   üí° Verifique se o arquivo n√£o est√° corrompido")
        print("   üí° Verifique se as depend√™ncias est√£o corretas")

def create_independent_model(model_path, output_path):
    """
    Cria uma vers√£o independente do modelo (apenas para predi√ß√£o)
    """
    print(f"\nüîÑ Criando modelo independente...")
    
    try:
        # Carregar com custom_objects
        from utils.learning.metrics import dice_coef, precision, recall
        from utils.learning.losses import dice_coef_loss
        
        def combined_loss(y_true, y_pred):
            bce = binary_crossentropy(y_true, y_pred)
            dice = dice_coef_loss(y_true, y_pred)
            return 0.5 * bce + 0.5 * dice
        
        model = load_model(model_path, custom_objects={
            'recall': recall,
            'precision': precision,
            'dice_coef': dice_coef,
            'dice_coef_loss': dice_coef_loss,
            'combined_loss': combined_loss
        })
        
        # Salvar apenas a arquitetura e pesos (sem compila√ß√£o)
        model.save(output_path, include_optimizer=False, save_traces=False)
        print(f"‚úÖ Modelo independente salvo em: {output_path}")
        
        # Testar se o novo modelo funciona independentemente
        test_model = load_model(output_path, compile=False)
        print("‚úÖ Modelo independente testado com sucesso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro criando modelo independente: {e}")
        return False

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("Uso: python inspect_model.py <modelo.hdf5> [criar_independente]")
        sys.exit(1)
    
    model_path = "training_history/2025-06-12 22:36:45.332568.hdf5"
    create_independent = len(sys.argv) > 2 and sys.argv[2].lower() == 'true'
    
    # Inspecionar modelo
    inspect_hdf5_model(model_path)
    
    # Criar vers√£o independente se solicitado
    if create_independent:
        output_path = model_path.replace('.hdf5', '_independent.hdf5')
        create_independent_model(model_path, output_path)